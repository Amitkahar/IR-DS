LAP 1.Basic Arithmetic Binary Operations To Show Set of Complex Number In Field
import cmath
def addcomplex(z1,z2):
    return z1+z2
def mulcomplex(z1,z2):
    return z1*z2
def divcomplex(z1,z2):
    return z1/z2
def subcomplex(z1,z2):
    return z1-z2
z1=9+87j
z2=69+98j
x=int(input("enter real part"))
y=int(input("imaginary part"))
z=complex(x,y)
print("phase of complex is: ",cmath.phase(z))
print("absolute of complex number is: ",abs(z))

output:
enter real part59
imaginary part85
phase of complex is:  0.9640291699113976
absolute of complex number is:  103.46980235798269
>>> addcomplex(z1,z2)
(78+185j)
>>> subcomplex(z1,z2)
(-60-11j)
>>> mulcomplex(z1,z2)
(-7905+6885j)

2.Find Complex Conjugate of a Complex Number
import numpy as np
z1=68+95j
print("conjugate of complex number is: ",z1.conjugate())

3.Some Important Operations on Complex Number in Linear Algebra.
import numpy as np
x1=6+8j
x2=58+98j
c=x1+x2
print("Addition of complex number is: ",c)

import numpy as np
x1=6+8j
print("Conjugate is: ",x1.conjugate())

import matplotlib.pyplot as plt
x2=[9+3j,8+57j,85+35j,89+68j]
m=[x for x in x2]
X=[x.real for x in m]
Y=[x.imag for x in m]
plt.scatter(X,Y,color="red")
plt.title("plotting complex number")
plt.xlabel("real part")
plt.ylabel("imaginary part")
plt.show()

import matplotlib.pyplot as plt
x2=[9+3j,8+57j,85+35j,89+68j]
m=[x for x in x2]
X=[x.real for x in m]
Y=[x.imag for x in m]
plt.plot(X,Y,color="red")
plt.title("plotting complex number")
plt.xlabel("real part")
plt.ylabel("imaginary part")
plt.show()

import matplotlib.pyplot as plt
def addComplex(z1,z2):
    return z1+z2
s={8.4+3j,5+5j,-4+1j,2.7+1j,4+2j,3.25-4j}
print("select operation")
print("1.addition of 2 complex numbers\n2.plot points from set of complexnumber\n3translation\n4.scaling\n5.rotation")
while True:
    ch=int(input("enter a choice:"))
    if ch==1:
        z1=complex(input("Enter the first complex number:"))
        z2=complex(input("Enter the second complex number:"))
        z3= addComplex(z1,z2)
        print(z3)
    elif ch==2:
        s1={x for x in s}
        X=[x.real for x in s1]
        Y=[x.imag for x in s1]
        plt.xlabel("Real part of complex number:")
        plt.ylabel("Non- Real part of complex number:")
        plt.title("plotting of complex number on complex plane:")
        plt.plot(X,Y,'yo')
        plt.axis([-2,9,-6,6])
        plt.show()
    elif ch==3:#translation
        c1=complex(input('enter translation in complex no'))
        s1={x+c1 for x in s}
        print(s1)
    elif ch==4:#scaling
        scale=float(input('enter scale pointlike(0.5) for1/2'))
        s1={x*scale for x in s}
        print(s1)
    elif ch==5:#rotation
        angle=int(input("Enter angle of rotation 90/180/270"))
    if angle==90:
        z1=3+2j
        z2=z1*1j
        print(z2)
        plt.xlabel("real part of the complexc number:")
        plt.ylabel("imaginary part of complex number:")
        plt.title("plotting of a complex number on complex plane ")
        plt.plot(z1.real,z1.imag,'yo')
        plt.plot(z2.real,z1.imag,'yo')
        plt.axis([-4,4,0,4])
        plt.show()
# s1={x*1j for x in s}
#print(s1)
    elif angle==180:
        s1={x*-1 for x in s}
        print(s1)
    elif angle==270:
        s1={x*1j-1 for x in s}
        print(s1)
    else:
        print("invalid angle:")
        break

4.Defining a Vector
import numpy as np
x=np.array([5,6,8,6])
print("printing vector: ",x)

5.Addition of Two Vectors
import numpy as np
x=np.array([5,6,8,6])
y=np.array([25,8,6,7])
print("Adding two vector: ",x+y)

6.System of Linear Equations With Unique Solution.
from math import*
import matplotlib.pyplot as plt
from numpy import arange, sin, pi
x=arange(0.0,7,0.1)
q=arange(0.0,6,0.1)
plt.plot(x, 6-3*x/2)
plt.title('line graph')
plt.ylabel('y')
plt.xlabel('x')
plt.plot(q,-4+4*q/5)
plt.show()

7.System of Linear Equations With No Solution.
from math import *
import matplotlib.pyplot as plt
from numpy import arange, sin, pi
# arange function is like rangebutfor fraction values.
x=arange(0.0,8,0.1)
q=arange(0.0,8,0.1)
plt.plot (x,6-3*x/2,color="red")
plt.title('Line Graph')
plt.ylabel('y')
plt.xlabel(' x ')
plt.plot (q, 12-3*x/2,color="green")
plt.show()

8.System of Linear Equations With Infinite Solution.
from math import *
import matplotlib.pyplot as plt
from numpy import arange, sin, pi
# arange function is like range but for fractionvalues.
x=arange(0.0,8,0.1)
q=arange(0.0,8,0.1)
plt.plot (x,6-3*x/2,color="black")
plt.title('Line Graph')
plt.ylabel('y')
plt.xlabel(' x ')
plt.plot (q, 6-3*x/2,color="yellow")
plt.show()

9. Matrix Multiplication.
import numpy as np
a=np.random.randn(2,3)
print("Matrix a:\n",a)
print("\nMatrix transpose of a:\n",a.T)
b=np.random.randn(3,2)
print("\nMatrix b:\n",b)
print("\n Matrix a x b:\n",a@b)
print("\n Matrix b x a:\n",b@a)

10.Calculate Rank of a Matrix.
import numpy as np
m=np.random.randn(2,3)
print("Matrix")
print(m)
r=np.linalg.matrix_rank(m)
print("rank of matrix is: ",r)

11.complex conjugate of product of a matrix
import numpy as np
x=np.array([[1,2],[3,4]])
y=np.array([[1,-1,0],[2,2,1]])
p=np.array([[1+4j,3-7j],[0-1j,2-4j]])
q=np.array([[1-4j,2+7j],[6-1j,2+9j]])
pass
	output:
>>> p
array([[1.+4.j, 3.-7.j],
       [0.-1.j, 2.-4.j]])
>>> q
array([[1.-4.j, 2.+7.j],
       [6.-1.j, 2.+9.j]])
>>> p1=np.conjugate(p)
>>> q1=np.conjugate(q)
>>> pq=np.conjugate(p@q)
>>> pq
array([[28.+45.j, 43.-28.j],
       [ 4.+27.j, 47. -8.j]])
>>> s=np.conjugate((p@q).T)
>>> u=(np.conjugate(p.T))@(np.conjugate(q.T))
>>> s==u
array([[False, False],
       [False, False]])
>>> s
array([[28.+45.j,  4.+27.j],
       [43.-28.j, 47. -8.j]])
>>> u
array([[24. +2.j, 19.-21.j],
       [ 7.+13.j, 51.+35.j]])
>>> v=(np.conjugate(q.T))@(np.conjugate(p.T))
>>> s==v
array([[ True,  True],
       [ True,  True]])

12.multiplication of matrix of different dimensions
	method 1
import numpy as np
x=np.array([[1,2],[3,4]])
y=np.array([[1,-1,0],[2,2,1]])
	output
>>> x
array([[1, 2],
       [3, 4]])
>>> y
array([[ 1, -1,  0],
       [ 2,  2,  1]])
>>> x@y
array([[ 5,  3,  2],
       [11,  5,  4]])
	method 2
import numpy as np
a=np.array([[1,2,3]])
b=np.array([[4,5,6]])
	output:
>>> b.T
array([[4],
       [5],
       [6]])
>>> a@b.T
array([[32]])
>>> b.T@a
array([[ 4,  8, 12],
       [ 5, 10, 15],
       [ 6, 12, 18]])

13.dot product of 2 vectors
import numpy as np
x=np.array([5,6,8,6,5,9])
y=np.array([2,5,69,8,2,5])
l=np.array([5,36,82,86,5,9])
k=np.array([28,52,69,8,2,5])
z=x@y
m=np.dot(l,k)
print("dot product of two vector is: ",z)
print("dot product of two vector is: ",m)

14.eigen values
import numpy as np
m=np.array([[1,2],[2,3]])
print("original sequence",m)
w,v=np.linalg.eig(m)
print("eigen value of vector is: ",w)
print("eigen vector of vector is: ",v)

15.Gauss elimination
import numpy as np
import sys
n = int(input('Enter number of unknowns: '))
a = np.zeros((n,n+1))
x = np.zeros(n)
print('Enter Augmented Matrix Coefficients:')
for i in range(n):
    for j in range(n+1):
        a[i][j] = float(input( 'a['+str(i)+']['+ str(j)+']='))
for i in range(n):
    if a[i][i] == 0.0:
        sys.exit('Divide by zero detected!')
    for j in range(i+1, n):
        ratio = a[j][i]/a[i][i]
        for k in range(n+1):
            a[j][k] = a[j][k] - ratio * a[i][k]
x[n-1] = a[n-1][n]/a[n-1][n-1]
for i in range(n-2,-1,-1):
    x[i] = a[i][n]
    for j in range(i+1,n):
        x[i] = x[i] - a[i][j]*x[j]
    x[i] = x[i]/a[i][i]
print('\nRequired solution is: ')
for i in range(n):
    print('X%d = %0.2f' %(i,x[i]), end = '\t')
	output:
Enter number of unknowns: 3
Enter Augmented Matrix Coefficients:
a[0][0]=1
a[0][1]=1
a[0][2]=1
a[0][3]=9
a[1][0]=2
a[1][1]=-3
a[1][2]=4
a[1][3]=13
a[2][0]=3
a[2][1]=4
a[2][2]=5
a[2][3]=40

16.finding gcd of 2 numbers
def gcd(a,b):
    if a%b==0:
        print(b)
    else:
            gcd(b,a%b)
output:
>>> gcd(65,8)
1
>>> gcd(110,10)
10

17.multiply 2 matrices using list comprehension
import numpy as np
X = np.array([[12,7,3],
    [4 ,5,6],
    [7 ,8,9]])
print(X)
print(np.transpose(X))

Y = [[5,8,1,2],
    [6,7,3,0],
    [4,5,9,1]]
Z=np.dot(X,Y)
print(Z)
result = [[sum(a*b for a,b in zip(X_row,Y_col)) for Y_col in zip(*Y)] for X_row in X]
for r in result:
   print(r)

18.matrix-vector and vector matrix multiplication
import numpy as np
x=np.array([6,9,2])
print("VECTOR: ",x)
print("\n")
y=np.random.randn(2,3)
print("MATRIX",y)
print("\n")
z=x*y
m=y*x
print("vector matrix multiplication",z)
print("\n")
print("matrix vector multiplication",m)

19.norm of a vector
import numpy as np
import math
x=5+5j
m=np.sqrt((x*np.conjugate(x)).sum())
print("norm of given complex is: ",m)

20.curve plot of f(x)=t**2*exp(-t**2)
from numpy import *
from matplotlib.pyplot import *
def f(t):
    return t**2*exp(-t**2)
t = linspace(0, 3, 51)
y = zeros(len(t))
for i in range(len(t)):
    y[i] = f(t[i])
plot(t, y)
xlabel('t')
ylabel('y')
legend(['t^2*exp(-t^2)','t^4*exp(-t^2)'])
plot(t,y)
title('Function plotting')
show()

21.image blending
import numpy as np
import cv2
x=np.uint8([250])
y=np.uint8([20])
print(x+y)
print(cv2.add(x,y))
img1=cv2.imread('bird1.jpeg')
img2=cv2.imread('bird2.jpeg')
#cv2.imshow('img1',img1)6
#cv2.imshow('img2',img2)
dst2=cv2.addWeighted(img1,0.7,img2,0.3,0)
cv2.imshow('dst2',dst2)
